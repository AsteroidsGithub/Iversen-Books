datasource db {
  provider = "postgresql"
  url      = "postgres://fcxsfrzs:vZ0LDKt9MT_TIMlFuoDnJ9OQ7LJvdQAz@topsy.db.elephantsql.com/fcxsfrzs"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  Publisher
  Teacher
}

enum wordLevel {
  newDecodable
  previouslyDecodable
  newHighFrequency
  previouslyHighFrequency
  contextional
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  permissions UserRole @default(Teacher)
  classes     Class[]
}

model Class {
  id        Int       @id @default(autoincrement())
  name      String
  students  Student[]
  teacher   User      @relation(fields: [teacherId], references: [id])
  teacherId Int
}

model Student {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  class           Class             @relation(fields: [classId], references: [id])
  classId         Int
  studentProgress StudentProgress[]
}

model Book {
  id              Int               @id @default(autoincrement())
  json            Json
  url             String
  studentProgress StudentProgress[]
}

model Word {
  id              Int            @id @default(autoincrement())
  word            String
  selfCorrected   Boolean        @default(false)
  StruggledWord   StruggledWord? @relation(fields: [struggledWordId], references: [id])
  struggledWordId Int?
}

model StruggledWord {
  id                Int              @id @default(autoincrement())
  words             Word[]
  value             String
  count             Int
  StudentProgress   StudentProgress? @relation(fields: [studentProgressId], references: [id])
  studentProgressId Int?
}

model StudentProgress {
  id             Int             @id @default(autoincrement())
  date           DateTime        @default(now())
  time           Int             @default(0)
  struggledWords StruggledWord[]
  book           Book            @relation(fields: [bookId], references: [id])
  bookId         Int
  student        Student         @relation(fields: [studentId], references: [id])
  studentId      Int
}
